@use "sass:math";
@use "sass:color";
// Include Bootstrap to load mixins
@import 'bootstrap/scss/bootstrap';
$clr-map: deepskyblue;
$clr-label: hsl(66, 75%, 45%);
// ! important ! la valeur de $mapItem-width (6rem) est utilisée dans `./src/components/Test/Quiz/Quiz.js` pour calculer le placement des items dans la Map. A modifier le cas échéant
$mapItem-width: 6rem;

.listItems {
    @include media-breakpoint-up(sm) {
        columns: 3;
    }

    @include media-breakpoint-up(lg) {
        columns: 1;
    }
}

.quizMap__container {
    min-height: 75vh;
    padding: 2em #{math.div($mapItem-width,2)} 0 #{math.div($mapItem-width,2)};
}

.quizMap__wrap {
    position: relative;
    min-height: 100%;
    display: flex;
}

.quizMap {
    position: relative;
    flex: 1;
    background-color: $clr-map;
    // Cadrillage
    $l: 25px;
    background-image: repeating-linear-gradient(to right,
        transparent,
        transparent #{$l - 1},
        #fff $l),
    repeating-linear-gradient(to bottom,
        transparent,
        transparent #{$l - 1},
        #fff $l);
    transition: background-color .125s ease-in-out,
        box-shadow .125s ease-in-out;

    &.over {
        box-shadow: 0 0 0 .25em yellowgreen;
        background-color: color.scale($clr-map, $lightness: 25%);
    }

    & p {
        position: absolute;
        width: 100%;
        height: auto;
        bottom: 0;
        color: rgba(#fff, .75);
        padding: .25em;
        font-weight: 700;
        font-size: 2rem;
        line-height: 1.2;
        text-align: center;
        z-index: 1;
    }
}

.mapItem {
    position: absolute;
    width: $mapItem-width;
    min-width: $mapItem-width; // nécessaire pour que le max-content du :hover ne soit pas plus petit
    display: flex;
    justify-content: flex-start;
    align-items: center;
    flex-wrap: nowrap;
    border: 1px solid rgba(#fff, .75);
    border-radius: .25em;
    margin: 0;
    padding: 0.125em .75em 0.125em 0;
    user-select: none;
    background-color: $clr-label;

    &.over {
        opacity: .5;
    }

    &>span {
        // le span est nécessaire pour pouvoir tronquer le texte ! cf.
        // https://css-tricks.com/flexbox-truncated-text/
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
    }

    &:hover {
        z-index: 9999 !important;
        box-shadow: .25em .25em .25em rgba(0, 0, 0, .25);
        // width: max($mapItem-width, max-content);
        width: max-content;
        cursor: grab;

        & svg.dragHandle {
            background-color: rgba(#fff, 25%);
            border-radius: .25em;
        }
    }

    // Icone qui marque l'origine
    & svg.mark {
        position: absolute;
        width: 1em;
        height: 1em;
        bottom: 0;
        left: math.div($mapItem-width, 2);
        transform: translate(-50%, 50%);
        padding: 0;
        background-color: transparent;
        fill: $clr-label;
        color: rgba(#fff, 75%);
    }

    // Icone Drag&Drop
    & svg.dragHandle {
        overflow: visible;
        margin: auto .25em auto .125em;
        transition: background-color 250ms ease-in-out;
        color: rgba(0, 0, 0, .5);
    }
}